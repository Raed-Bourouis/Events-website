"use client";
import {
  useInput
} from "./chunk-6I7ZUYLD.js";
import "./chunk-IGWOXN57.js";
import {
  capitalize,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  require_prop_types,
  styled_default,
  useSlot,
  useThemeProps
} from "./chunk-7WOYPXAI.js";
import "./chunk-YV3COZNF.js";
import {
  require_jsx_runtime
} from "./chunk-6TYHCIKU.js";
import {
  __toESM,
  require_react
} from "./chunk-5WT6CQYF.js";

// node_modules/@mui/joy/Input/Input.js
var React3 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/joy/Input/inputClasses.js
function getInputUtilityClass(slot) {
  return generateUtilityClass("MuiInput", slot);
}
var inputClasses = generateUtilityClasses("MuiInput", ["root", "input", "formControl", "focused", "disabled", "error", "adornedStart", "adornedEnd", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "fullWidth", "startDecorator", "endDecorator"]);
var inputClasses_default = inputClasses;

// node_modules/@mui/joy/Input/useForwardedInput.js
var React2 = __toESM(require_react());

// node_modules/@mui/joy/FormControl/FormControlContext.js
var React = __toESM(require_react());
var FormControlContext = React.createContext(void 0);
if (true) {
  FormControlContext.displayName = "FormControlContext";
}
var FormControlContext_default = FormControlContext;

// node_modules/@mui/joy/Input/useForwardedInput.js
function useForwardedInput(props, classes) {
  const formControl = React2.useContext(FormControlContext_default);
  const {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoComplete,
    autoFocus,
    className,
    defaultValue,
    disabled: disabledProp,
    disabledInProp,
    error: errorProp,
    id,
    name,
    onClick,
    onChange,
    onKeyDown,
    onKeyUp,
    onFocus,
    onBlur,
    placeholder,
    readOnly,
    required,
    type,
    value,
    ...other
  } = props;
  const {
    getRootProps,
    getInputProps,
    focused,
    error,
    disabled
  } = useInput({
    disabled: disabledInProp ?? (formControl == null ? void 0 : formControl.disabled) ?? disabledProp,
    defaultValue,
    error: errorProp,
    onBlur,
    onClick,
    onChange,
    onFocus,
    required: required ?? (formControl == null ? void 0 : formControl.required),
    value
  });
  const rootStateClasses = {
    [classes.disabled]: disabled,
    [classes.error]: error,
    [classes.focused]: focused,
    [classes.formControl]: Boolean(formControl),
    [className]: className
  };
  const inputStateClasses = {
    [classes.disabled]: disabled
  };
  const propsToForward = {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoComplete,
    autoFocus,
    disabled,
    id,
    onKeyDown,
    onKeyUp,
    name,
    placeholder,
    readOnly,
    type
  };
  return {
    formControl,
    propsToForward,
    rootStateClasses,
    inputStateClasses,
    getRootProps,
    getInputProps,
    focused,
    error,
    disabled,
    ...other
  };
}

// node_modules/@mui/joy/colorInversion/colorInversionUtils.js
var INVERTED_COLORS_ATTR = "data-skip-inverted-colors";
var INVERTED_COLORS_SELECTOR = `& :not([${INVERTED_COLORS_ATTR}], [${INVERTED_COLORS_ATTR}] *)`;

// node_modules/@mui/joy/Input/Input.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var useUtilityClasses = (ownerState) => {
  const {
    disabled,
    fullWidth,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", fullWidth && "fullWidth", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    input: ["input"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getInputUtilityClass, {});
};
var StyledInputRoot = styled_default("div")(({
  theme,
  ownerState
}) => {
  var _a, _b, _c, _d, _e;
  const variantStyle = (_a = theme.variants[`${ownerState.variant}`]) == null ? void 0 : _a[ownerState.color];
  return [{
    "--Input-radius": theme.vars.radius.sm,
    "--Input-gap": "0.5rem",
    "--Input-placeholderColor": "inherit",
    "--Input-placeholderOpacity": 0.64,
    "--Input-decoratorColor": theme.vars.palette.text.icon,
    "--Input-focused": "0",
    "--Input-focusedThickness": theme.vars.focus.thickness,
    "--Input-focusedHighlight": (_b = theme.vars.palette[ownerState.color === "neutral" ? "primary" : ownerState.color]) == null ? void 0 : _b[500],
    [`&:not([${INVERTED_COLORS_ATTR}])`]: {
      ...ownerState.instanceColor && {
        "--_Input-focusedHighlight": (_c = theme.vars.palette[ownerState.instanceColor === "neutral" ? "primary" : ownerState.instanceColor]) == null ? void 0 : _c[500]
      },
      "--Input-focusedHighlight": `var(--_Input-focusedHighlight, ${theme.vars.palette.focusVisible})`
    },
    ...ownerState.size === "sm" && {
      "--Input-minHeight": "2rem",
      "--Input-paddingInline": "0.5rem",
      "--Input-decoratorChildHeight": "min(1.5rem, var(--Input-minHeight))",
      "--Icon-fontSize": theme.vars.fontSize.xl
    },
    ...ownerState.size === "md" && {
      "--Input-minHeight": "2.25rem",
      "--Input-paddingInline": "0.75rem",
      "--Input-decoratorChildHeight": "min(1.75rem, var(--Input-minHeight))",
      "--Icon-fontSize": theme.vars.fontSize.xl2
    },
    ...ownerState.size === "lg" && {
      "--Input-minHeight": "2.75rem",
      "--Input-paddingInline": "1rem",
      "--Input-gap": "0.75rem",
      "--Input-decoratorChildHeight": "min(2.25rem, var(--Input-minHeight))",
      "--Icon-fontSize": theme.vars.fontSize.xl2
    },
    // variables for controlling child components
    "--Input-decoratorChildOffset": "min(calc(var(--Input-paddingInline) - (var(--Input-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Input-decoratorChildHeight)) / 2), var(--Input-paddingInline))",
    "--_Input-paddingBlock": "max((var(--Input-minHeight) - 2 * var(--variant-borderWidth, 0px) - var(--Input-decoratorChildHeight)) / 2, 0px)",
    "--Input-decoratorChildRadius": "max(var(--Input-radius) - var(--variant-borderWidth, 0px) - var(--_Input-paddingBlock), min(var(--_Input-paddingBlock) + var(--variant-borderWidth, 0px), var(--Input-radius) / 2))",
    "--Button-minHeight": "var(--Input-decoratorChildHeight)",
    "--Button-paddingBlock": "0px",
    // to ensure that the height of the button is equal to --Button-minHeight
    "--IconButton-size": "var(--Input-decoratorChildHeight)",
    "--Button-radius": "var(--Input-decoratorChildRadius)",
    "--IconButton-radius": "var(--Input-decoratorChildRadius)",
    boxSizing: "border-box",
    ...ownerState.variant !== "plain" && {
      boxShadow: theme.shadow.xs
    },
    minWidth: 0,
    minHeight: "var(--Input-minHeight)",
    ...ownerState.fullWidth && {
      width: "100%"
    },
    cursor: "text",
    position: "relative",
    display: "flex",
    paddingInline: `var(--Input-paddingInline)`,
    borderRadius: "var(--Input-radius)",
    ...theme.typography[`body-${ownerState.size}`],
    ...variantStyle,
    backgroundColor: (variantStyle == null ? void 0 : variantStyle.backgroundColor) ?? theme.vars.palette.background.surface,
    "&::before": {
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      pointerEvents: "none",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1,
      borderRadius: "inherit",
      margin: "calc(var(--variant-borderWidth, 0px) * -1)",
      // for outlined variant
      boxShadow: `var(--Input-focusedInset, inset) 0 0 0 calc(var(--Input-focused) * var(--Input-focusedThickness)) var(--Input-focusedHighlight)`
    }
  }, {
    "&:hover": {
      ...(_d = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _d[ownerState.color],
      backgroundColor: null
      // it is not common to change background on hover for Input
    },
    [`&.${inputClasses_default.disabled}`]: (_e = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _e[ownerState.color],
    "&:focus-within::before": {
      "--Input-focused": "1"
    }
  }];
});
var StyledInputHtml = styled_default("input")(({
  ownerState
}) => ({
  border: "none",
  // remove the native input width
  minWidth: 0,
  // remove the native input width
  outline: 0,
  // remove the native input outline
  padding: 0,
  // remove the native input padding
  flex: 1,
  color: "inherit",
  backgroundColor: "transparent",
  fontFamily: "inherit",
  fontSize: "inherit",
  fontStyle: "inherit",
  fontWeight: "inherit",
  lineHeight: "inherit",
  textOverflow: "ellipsis",
  "&:-webkit-autofill": {
    paddingInline: "var(--Input-paddingInline)",
    ...!ownerState.startDecorator && {
      marginInlineStart: "calc(-1 * var(--Input-paddingInline))",
      paddingInlineStart: "var(--Input-paddingInline)",
      borderTopLeftRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))",
      borderBottomLeftRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))"
    },
    ...!ownerState.endDecorator && {
      marginInlineEnd: "calc(-1 * var(--Input-paddingInline))",
      paddingInlineEnd: "var(--Input-paddingInline)",
      borderTopRightRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))",
      borderBottomRightRadius: "calc(var(--Input-radius) - var(--variant-borderWidth, 0px))"
    }
  },
  "&::-webkit-input-placeholder": {
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  },
  "&::-moz-placeholder": {
    // Firefox 19+
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  },
  "&:-ms-input-placeholder": {
    // IE11
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  },
  "&::-ms-input-placeholder": {
    // Edge
    color: "var(--Input-placeholderColor)",
    opacity: "var(--Input-placeholderOpacity)"
  }
}));
var StyledInputStartDecorator = styled_default("div")({
  "--Button-margin": "0 0 0 calc(var(--Input-decoratorChildOffset) * -1)",
  "--IconButton-margin": "0 0 0 calc(var(--Input-decoratorChildOffset) * -1)",
  "--Icon-margin": "0 0 0 calc(var(--Input-paddingInline) / -4)",
  display: "inherit",
  alignItems: "center",
  paddingBlock: "var(--unstable_InputPaddingBlock)",
  // for wrapping Autocomplete's tags
  flexWrap: "wrap",
  // for wrapping Autocomplete's tags
  marginInlineEnd: "var(--Input-gap)",
  color: "var(--Input-decoratorColor)",
  cursor: "initial"
});
var StyledInputEndDecorator = styled_default("div")({
  "--Button-margin": "0 calc(var(--Input-decoratorChildOffset) * -1) 0 0",
  "--IconButton-margin": "0 calc(var(--Input-decoratorChildOffset) * -1) 0 0",
  "--Icon-margin": "0 calc(var(--Input-paddingInline) / -4) 0 0",
  display: "inherit",
  alignItems: "center",
  marginInlineStart: "var(--Input-gap)",
  color: "var(--Input-decoratorColor)",
  cursor: "initial"
});
var InputRoot = styled_default(StyledInputRoot, {
  name: "JoyInput",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var InputInput = styled_default(StyledInputHtml, {
  name: "JoyInput",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})({});
var InputStartDecorator = styled_default(StyledInputStartDecorator, {
  name: "JoyInput",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({});
var InputEndDecorator = styled_default(StyledInputEndDecorator, {
  name: "JoyInput",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})({});
var Input = React3.forwardRef(function Input2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyInput"
  });
  const {
    propsToForward,
    rootStateClasses,
    inputStateClasses,
    getRootProps,
    getInputProps,
    formControl,
    focused,
    error: errorProp = false,
    disabled,
    fullWidth = false,
    size: sizeProp = "md",
    color: colorProp = "neutral",
    variant = "outlined",
    startDecorator,
    endDecorator,
    component,
    slots = {},
    slotProps = {},
    ...other
  } = useForwardedInput({
    ...props,
    disabledInProp: inProps.disabled
  }, inputClasses_default);
  if (true) {
    const registerEffect = formControl == null ? void 0 : formControl.registerEffect;
    React3.useEffect(() => {
      if (registerEffect) {
        return registerEffect();
      }
      return void 0;
    }, [registerEffect]);
  }
  const error = inProps.error ?? (formControl == null ? void 0 : formControl.error) ?? errorProp;
  const size = inProps.size ?? (formControl == null ? void 0 : formControl.size) ?? sizeProp;
  const color = inProps.color ?? (error ? "danger" : (formControl == null ? void 0 : formControl.color) ?? colorProp);
  const ownerState = {
    instanceColor: error ? "danger" : inProps.color,
    ...props,
    fullWidth,
    color,
    disabled,
    error,
    focused,
    size,
    variant
  };
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = {
    ...other,
    component,
    slots,
    slotProps
  };
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: [classes.root, rootStateClasses],
    elementType: InputRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    ...formControl && {
      additionalProps: {
        id: formControl.htmlFor,
        "aria-describedby": formControl["aria-describedby"]
      }
    },
    className: [classes.input, inputStateClasses],
    elementType: InputInput,
    getSlotProps: getInputProps,
    internalForwardedProps: propsToForward,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: InputStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: InputEndDecorator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime.jsxs)(SlotRoot, {
    ...rootProps,
    children: [startDecorator && (0, import_jsx_runtime.jsx)(SlotStartDecorator, {
      ...startDecoratorProps,
      children: startDecorator
    }), (0, import_jsx_runtime.jsx)(SlotInput, {
      ...inputProps
    }), endDecorator && (0, import_jsx_runtime.jsx)(SlotEndDecorator, {
      ...endDecoratorProps,
      children: endDecorator
    })]
  });
});
true ? Input.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  autoComplete: import_prop_types.default.string,
  /**
   * @ignore
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * Class name applied to the root element.
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * @ignore
   */
  defaultValue: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * @ignore
   */
  disabled: import_prop_types.default.bool,
  /**
   * Trailing adornment for this input.
   */
  endDecorator: import_prop_types.default.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   * @default false
   */
  error: import_prop_types.default.bool,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: import_prop_types.default.bool,
  /**
   * @ignore
   */
  id: import_prop_types.default.string,
  /**
   * @ignore
   */
  name: import_prop_types.default.string,
  /**
   * @ignore
   */
  onChange: import_prop_types.default.func,
  /**
   * @ignore
   */
  placeholder: import_prop_types.default.string,
  /**
   * @ignore
   */
  readOnly: import_prop_types.default.bool,
  /**
   * @ignore
   */
  required: import_prop_types.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["sm", "md", "lg"]), import_prop_types.default.string]),
  /**
   * Leading adornment for this input.
   */
  startDecorator: import_prop_types.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * @ignore
   */
  value: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var Input_default = Input;
export {
  Input_default as default,
  getInputUtilityClass,
  inputClasses_default as inputClasses
};
//# sourceMappingURL=@mui_joy_Input.js.map
